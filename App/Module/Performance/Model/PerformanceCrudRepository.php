<?php
require APP_ROOT . '/Lib/Base/DatabaseAccessValidator.php';

require APP_ROOT . '/Module/Performance/Api/Crud/PerformanceCrudRepositoryInterface.php';


/**
 * Performance Class
 * 
 * Provides methods for performing CRUD functions on performance db table
 * 
 * @requires Database
 */
class PerformanceCrudRepository extends DatabaseAccessValidator implements PerformanceCrudRepositoryInterface
{
    //METHODS
    //crudInterface Methods
    public function save(PerformanceDataRepository $performanceDataObject){

        /**
         * REFACTORING TASKS
         * Acquire all necessary data from $performanceObject
         */

        //request db access
        $this->databaseAccessValidator('performance');

        //sql statement
        $sql = "INSERT INTO performance(venue_id,programme_id,date)
                VALUES (?,?,?)";

        //Prepare sql statement and convert to PDOStatement
        $stmt = $this->databaseAccess()->prepare($sql);

        //Bind property values to sql statement placeholder values
        $stmt->bindValue(1, $performanceDataObject->getVenueId(), PDO::PARAM_INT);

        $stmt->bindValue(2, $performanceDataObject->getProgrammeId(), PDO::PARAM_INT);

        $strDate = $performanceDataObject->getDate()->format('Y-m-d H:i:s');

        $stmt->bindValue(3, $strDate, PDO::PARAM_STR);

        //Execute PDOStatement
        $stmt->execute();

        //Retrieve latest ID generated by the database connection
        $new_id = $this->getConn()->lastInsertId();

        //Retrun latest ID to calling function
        return $new_id;
    }

    public function update(PerformanceDataRepository $performanceDataObject){

        /**
         * REFACTORING TASKS
         * Acquire all necessary data from $performanceObject
         */

        //request db access
        $this->databaseAccessValidator('performance');

        //sql statement
        $sql = 'UPDATE performance
                SET venue_id = ?,
                    programme_id = ?,
                    date = ?
                WHERE id = ?';

        //Prepare sql statement and convert to PDOStatement
        $stmt = $this->databaseAccess()->prepare($sql);

        //Bind property values to sql statement placeholder values
        $stmt->bindValue(1, $performanceDataObject->getVenueId(), PDO::PARAM_INT);

        $stmt->bindValue(2, $performanceDataObject->getProgrammeId(), PDO::PARAM_INT);

        $strDate = $performanceDataObject->getDate()->format('Y-m-d H:i:s');

        $stmt->bindValue(3, $strDate, PDO::PARAM_STR);

        $stmt->bindValue(4, $performanceDataObject->getPerformanceId(), PDO::PARAM_INT);

        //Execute PDOStatement
        $stmt->execute();

        //Retrieve count for number of rows effected by execution of PDOStatement
        $rows_affected = $stmt->rowCount();

        //Return count to calling function
        return $rows_affected;
    }

    public function getList(){

        /**
         * REFACTORING TASKS
         * Acquire all necessary data from $performanceObject
         */

        //request db access
        $this->databaseAccessValidator('performance');

        //Establish foundation of sql statement
        $sql = "SELECT * FROM performance";

        //Prepare statement and convert to PDOStatement
        $stmt = $this->databaseAccess()->prepare($sql);

        //Execute statement and fetch results
        try{
             $stmt->execute();

             $results = $stmt->fetchAll(PDO::FETCH_ASSOC);

        } catch (PDOException $e){
             //Get string version of error message and store in variable
             $message = $e->getMessage(); 
             echo $message;
        }

        return $results;

    }

    public function getListById(PerformanceDataRepository $performanceDataObject){

        /**
         * REFACTORING TASKS
         * Acquire all necessary data from $performanceObject
         */

        //request db access
        $this->databaseAccessValidator('performance');
    
        //Establish foundation of sql statement
        $sql = "SELECT * FROM performance
                 WHERE id = ? ;";

        //Prepare statement and convert to PDOStatement
        $stmt = $this->databaseAccess()->prepare($sql);

        //Bind int argument to placeholder value in WHERE clause.
        $stmt->bindValue(1, $performanceDataObject->getPerformanceId(), PDO::PARAM_INT);

        //Execute statement and fetch results
        try{
             $stmt->execute();

             $results = $stmt->fetchAll(PDO::FETCH_ASSOC);

        } catch (PDOException $e){
             //get string version of error message and store in variable
             $message = $e->getMessage(); 
             echo $message;
        }

        return $results;

    }

    public function deleteById(PerformanceDataRepository $performanceDataObject){

        /**
         * REFACTORING TASKS
         * Acquire all necessary data from $performanceObject
         */

        //request db access
        $this->databaseAccessValidator('performance');
    
        //Establish foundation of sql statement
            $sql = "DELETE FROM performance
                    WHERE id = ? ;";

            //Prepare statement and convert to PDOStatement
            $stmt = $this->databaseAccess()->prepare($sql);

            //Bind int argument to placeholder value in WHERE clause.
            $stmt->bindValue(1, $performanceDataObject->getPerformanceId(), PDO::PARAM_INT);

            //Execute statement and fetch results
            try{
                $stmt->execute();

            } catch (PDOException $e){
                //Get string version of error message and store in variable
                $message = $e->getMessage(); 
                echo $message;
            }

            return $stmt->rowCount();

        }
}
