<?php

require_once APP_ROOT . '/Lib/Base/DatabaseAccessValidator.php';
require_once APP_ROOT . '/Module/Performance/Api/Crud/PerformanceCrudRepositoryInterface.php';

class PerformanceCrudRepository extends DatabaseAccessValidator implements PerformanceCrudRepositoryInterface
{
    //METHODS
    //crudInterface Methods
    public function save(PerformanceDataRepository $performanceDataObject): string
    {
        //request db access
        $this->databaseAccessValidator('performance');

        //sql statement
        $sql = "INSERT INTO performance(venue_id,programme_id,date,image)
                VALUES (?,?,?,?)";

        //Prepare sql statement and convert to PDOStatement
        $stmt = $this->databaseAccess()->prepare($sql);

        //Bind property values to sql statement placeholder values
        $stmt->bindValue(1, $performanceDataObject->getVenueId(), PDO::PARAM_INT);
        $stmt->bindValue(2, $performanceDataObject->getProgrammeId(), PDO::PARAM_INT);
        $strDate = $performanceDataObject->getDate()->format('Y-m-d H:i:s');
        $stmt->bindValue(3, $strDate, PDO::PARAM_STR);
        $stmt->bindValue(4, $performanceDataObject->getImage(), PDO::PARAM_STR);

        //Execute PDOStatement
        $stmt->execute();

        //Retrieve latest ID generated by the database connection
        $new_id = $this->getConn()->lastInsertId();

        //Return latest ID to calling function
        return $new_id;
    }

    public function getList(): array
    {
        //request db access
        $this->databaseAccessValidator('performance');

        //Establish foundation of sql statement
        $sql = "SELECT * FROM (
                SELECT per.id as id, per.venue_id as venue_id, per.programme_id as programme_id, per.date as date, pro.name as name, per.image as image FROM performance as per
                LEFT JOIN programme as pro ON per.programme_id = pro.id) as prf;";

        //Prepare statement and convert to PDOStatement
        $stmt = $this->databaseAccess()->prepare($sql);

        //Execute statement and fetch results
        try {
             $stmt->execute();
             $results = $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
             //Get string version of error message and store in variable
             $message = $e->getMessage();
             printf($message);
        }
        return $results;
    }

    public function getListById(PerformanceDataRepository $performanceDataObject): array
    {
        //request db access
        $this->databaseAccessValidator('performance');
    
        //Establish foundation of sql statement
        $sql = "SELECT * FROM (
                SELECT per.id as id, per.venue_id as venue_id, per.programme_id as programme_id, per.date as date, pro.name as name, per.image as image FROM performance as per
                LEFT JOIN programme as pro ON per.programme_id = pro.id) as prf
                WHERE id = ? ;";

        //Prepare statement and convert to PDOStatement
        $stmt = $this->databaseAccess()->prepare($sql);

        //Bind int argument to placeholder value in WHERE clause.
        $stmt->bindValue(1, $performanceDataObject->getPerformanceId(), PDO::PARAM_INT);

        //Execute statement and fetch results
        try {
             $stmt->execute();
             $results = $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
             //get string version of error message and store in variable
             $message = $e->getMessage();
            printf($message);
        }
        return $results;
    }

    public function update(PerformanceDataRepository $performanceDataObject): bool
    {
        //request db access
        $this->databaseAccessValidator('performance');

        //sql statement
        $sql = 'UPDATE performance
                SET venue_id = ?,
                    programme_id = ?,
                    date = ?,
                    image = ?
                WHERE id = ?';

        //Prepare sql statement and convert to PDOStatement
        $stmt = $this->databaseAccess()->prepare($sql);

        //Bind property values to sql statement placeholder values
        $stmt->bindValue(1, $performanceDataObject->getVenueId(), PDO::PARAM_INT);
        $stmt->bindValue(2, $performanceDataObject->getProgrammeId(), PDO::PARAM_INT);
        $strDate = $performanceDataObject->getDate()->format('Y-m-d H:i:s');
        $stmt->bindValue(3, $strDate, PDO::PARAM_STR);
        $stmt->bindValue(4, $performanceDataObject->getImage(), PDO::PARAM_STR);
        $stmt->bindValue(5, $performanceDataObject->getPerformanceId(), PDO::PARAM_INT);

        //Execute PDOStatement
        try {
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            //Get string version of error message and store in variable
            $message = $e->getMessage();
            printf($message);
            return false;
        }
    }

    public function deleteById(PerformanceDataRepository $performanceDataObject): bool
    {
        //request db access
        $this->databaseAccessValidator('performance');
    
        //Establish foundation of sql statement
        $sql = "DELETE FROM performance
                WHERE id = ? ;";

        //Prepare statement and convert to PDOStatement
        $stmt = $this->databaseAccess()->prepare($sql);

        //Bind int argument to placeholder value in WHERE clause.
        $stmt->bindValue(1, $performanceDataObject->getPerformanceId(), PDO::PARAM_INT);

        //Execute statement and fetch results
        try {
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            $message = $e->getMessage();
            printf($message);
            return false;
        }
    }
}

